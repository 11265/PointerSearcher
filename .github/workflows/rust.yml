name: Build & Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test job runs on Ubuntu
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      # 只检查代码格式和语法
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Check code
        run: cargo check --workspace
        
      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

  # Build job runs on multiple platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ptrscan
            asset_name: ptrscan-linux-amd64
          - os: windows-latest 
            target: x86_64-pc-windows-msvc
            artifact_name: ptrscan.exe
            asset_name: ptrscan-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ptrscan
            asset_name: ptrscan-macos-amd64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build libptrscan
        run: |
          cd libptrscan
          cargo build --release --target ${{ matrix.target }}
          cd ..

      # 确保目标目录存在
      - name: Prepare directories
        shell: bash
        run: |
          mkdir -p target/${{ matrix.target }}/release/

      - name: Build command
        run: |
          cd command
          cargo build --release --target ${{ matrix.target }}
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # Release job creates GitHub releases with built artifacts
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ptrscan-linux-amd64
            ptrscan-windows-amd64.exe
            ptrscan-macos-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
